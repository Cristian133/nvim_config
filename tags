!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
#	init.map.vim	/^vnoremap # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m
#	init.map.vscode.vim	/^vnoremap # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@\/<CR><CR>$/;"	m
*	init.map.vim	/^vnoremap * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m
*	init.map.vscode.vim	/^vnoremap * :<C-u>call VisualSelection('', '')<CR>\/<C-R>=@\/<CR><CR>$/;"	m
,r	init.plug.vim	/^nmap ,r :Ack$/;"	m
,wr	init.plug.vim	/^nmap ,wr :execute ":Ack " . expand('<cword>')<CR>$/;"	m
<A-t>	init.map.vim	/^inoremap <A-t> <Esc>:call Term_toggle(7)<CR>$/;"	m
<A-t>	init.map.vim	/^nnoremap <A-t> :call Term_toggle(7)<CR>$/;"	m
<C-h>	init.map.vim	/^nmap <C-h> <C-W>h$/;"	m
<C-j>	init.map.vim	/^nmap <C-j> <C-W>j$/;"	m
<C-k>	init.map.vim	/^nmap <C-k> <C-W>k$/;"	m
<C-l>	init.map.vim	/^nmap <C-l> <C-W>l$/;"	m
<C-space>	init.map.vim	/^nmap <C-space> ?$/;"	m
<C-space>	init.map.vscode.vim	/^nmap <C-space> ?$/;"	m
<F10>	init.map.vim	/^nmap <F10> :let _s=@\/<Bar>:%s\/\\s\\+$\/\/e<Bar>:let @\/=_s<Bar><CR>$/;"	m
<F2>	init.map.vim	/^nmap <F2> :call ToggleCol80()<CR>$/;"	m
<F3>	init.map.vim	/^nmap <F3> :call ToggleHex()<CR>$/;"	m
<F4>	init.map.vim	/^map <F4> <leader>bt$/;"	m
<F5>	init.map.vim	/^nmap <F5> :NERDTreeToggle<CR>$/;"	m
<F6>	init.map.vim	/^nmap <F6> :Bclose<CR>$/;"	m
<F7>	init.map.vim	/^nmap <F7> :call ToggleNumber()<CR>$/;"	m
<F8>	init.map.vim	/^nmap <F8> :call ToggleWrap()<CR>$/;"	m
<F9>	init.map.vim	/^imap <F9> <ESC>:w!<CR>:call Build()<CR>$/;"	m
<F9>	init.map.vim	/^nmap <F9> :w!<CR>:call Build()<CR>$/;"	m
<Leader>f	init.map.vim	/^nnoremap <Leader>f :NERDTreeFind<CR>$/;"	m
<Leader>ju	init.map.vim	/^nmap <Leader>ju :call GotoJump()<CR>$/;"	m
<Leader>tl	init.tab.vim	/^nmap <Leader>tl :exe "tabn ".g:lasttab<CR>$/;"	m
<M-Down>	init.map.vim	/^inoremap <M-Down> <Esc>:m .+1<CR>==gi$/;"	m
<M-Down>	init.map.vim	/^nnoremap <M-Down> :m .+1<CR>==$/;"	m
<M-Down>	init.map.vim	/^vnoremap <M-Down> :m '>+1<CR>gv=gv$/;"	m
<M-S-Down>	init.map.vim	/^inoremap <M-S-Down> <Esc>:t .+0<CR>==gi$/;"	m
<M-S-Down>	init.map.vim	/^nnoremap <M-S-Down> :t .+0<CR>==$/;"	m
<M-S-Down>	init.map.vim	/^vnoremap <M-S-Down> :t '>+0<CR>gv=gv$/;"	m
<M-S-Up>	init.map.vim	/^inoremap <M-S-Up> <Esc>:t .-1<CR>==gi$/;"	m
<M-S-Up>	init.map.vim	/^nnoremap <M-S-Up> :t .-1<CR>==$/;"	m
<M-S-Up>	init.map.vim	/^vnoremap <M-S-Up> :t '<-1<CR>gv=gv$/;"	m
<M-Up>	init.map.vim	/^inoremap <M-Up> <Esc>:m .-2<CR>==gi$/;"	m
<M-Up>	init.map.vim	/^nnoremap <M-Up> :m .-2<CR>==$/;"	m
<M-Up>	init.map.vim	/^vnoremap <M-Up> :m '<-2<CR>gv=gv$/;"	m
<leader><CR>	init.map.vim	/^nmap <leader><CR> :noh<CR>$/;"	m
<leader><CR>	init.map.vscode.vim	/^nmap <leader><CR> :noh<CR>$/;"	m
<leader><Down>	init.map.vim	/^nmap <leader><Down> ]'$/;"	m
<leader><Left>	init.map.vim	/^nmap <leader><Left>  :bprevious<CR>$/;"	m
<leader><Right>	init.map.vim	/^nmap <leader><Right> :bnext<CR>$/;"	m
<leader><Up>	init.map.vim	/^nmap <leader><Up> ['$/;"	m
<leader>b	init.map.vim	/^nmap <leader>b q\/$/;"	m
<leader>cd	init.map.vim	/^nmap <leader>cd :cd %:p:h<CR>:pwd<CR>$/;"	m
<leader>e	init.map.vim	/^map <leader>e :n ~\/.config\/nvim\/init.vim ~\/.config\/nvim\/init.map.vim ~\/.config\/nvim\/init.plug.vim ~\/.config\/nvim\/init.map.vscode.vim<CR>$/;"	m
<leader>h	init.map.vim	/^nmap <leader>h       :bprevious<CR>$/;"	m
<leader>j	init.map.vim	/^nmap <leader>j ]'$/;"	m
<leader>k	init.map.vim	/^nmap <leader>k ['$/;"	m
<leader>l	init.map.vim	/^nmap <leader>l       :bnext<CR>$/;"	m
<leader>m	init.map.vim	/^nmap <leader>m :marks<CR>$/;"	m
<leader>p	init.map.vim	/^nnoremap <leader>p "+p$/;"	m
<leader>p	init.map.vscode.vim	/^nnoremap <leader>p "+p$/;"	m
<leader>r	init.map.vim	/^nmap <leader>r :registers<CR>$/;"	m
<leader>t	init.map.vim	/^noremap <leader>t :call Term_toggle(7)<CR>$/;"	m
<leader>t<leader>	init.tab.vim	/^map <leader>t<leader> :tabnext<cr>$/;"	m
<leader>tc	init.tab.vim	/^map <leader>tc :tabclose<cr>$/;"	m
<leader>te	init.tab.vim	/^map <leader>te :tabedit <C-r>=expand("%:p:h")<cr>\/$/;"	m
<leader>tm	init.tab.vim	/^map <leader>tm :tabmove$/;"	m
<leader>tn	init.tab.vim	/^map <leader>tn :tabnew<cr>$/;"	m
<leader>to	init.tab.vim	/^map <leader>to :tabonly<cr>$/;"	m
<leader>x	init.map.vim	/^nmap <leader>x q:$/;"	m
<leader>y	init.map.vim	/^nnoremap <leader>y "+yy$/;"	m
<leader>y	init.map.vscode.vim	/^nnoremap <leader>y "+yy$/;"	m
<leader>ñ	init.map.vim	/^nmap <leader>ñ :set list!<CR>$/;"	m
<space>	init.map.vim	/^nmap <space> \/$/;"	m
<space>	init.map.vscode.vim	/^nmap <space> \/$/;"	m
Bclose	init.vim	/^    command! Bclose call <SID>BufcloseCloseIt()$/;"	c
BufcloseCloseIt	init.vim	/^    function! <SID>BufcloseCloseIt()$/;"	f
Build	init.vim	/^    function! Build()$/;"	f
CurrentGitStatus	init.vim	/^    function CurrentGitStatus()$/;"	f
FileSize	init.vim	/^    function! FileSize()$/;"	f
GitBranch	init.vim	/^    function! GitBranch()$/;"	f
GotoJump	init.vim	/^    function! GotoJump()$/;"	f
Highlight_Statusline	init.vim	/^    function Highlight_Statusline()$/;"	f
NERDTreeIgnore	init.plug.vim	/^let NERDTreeIgnore = ['\\.pyc$', '\\.pyo$']$/;"	v
NERDTreeShowHidden	init.plug.vim	/^let NERDTreeShowHidden=1$/;"	v
StatuslineGit	init.vim	/^    function! StatuslineGit()$/;"	f
T	init.map.vim	/^map T <C-]>$/;"	m
Term_toggle	init.vim	/^    function! Term_toggle(height)$/;"	f
ToggleCol80	init.vim	/^    function! ToggleCol80()$/;"	f
ToggleHex	init.vim	/^    function! ToggleHex()$/;"	f
ToggleNumber	init.vim	/^    function! ToggleNumber()$/;"	f
ToggleWrap	init.vim	/^    function! ToggleWrap()$/;"	f
VisualSelection	init.vim	/^    function! VisualSelection(direction, extra_filter) range$/;"	f
W	init.map.vim	/^command W w !sudo tee % > \/dev\/null$/;"	c
W	init.map.vscode.vim	/^command W w !sudo tee % > \/dev\/null$/;"	c
WindowNumber	init.vim	/^    function! WindowNumber()$/;"	f
g:NERDTreeDisableExactMatchHighlight	init.plug.vim	/^let g:NERDTreeDisableExactMatchHighlight = 1$/;"	v
g:NERDTreeDisablePatternMatchHighlight	init.plug.vim	/^let g:NERDTreeDisablePatternMatchHighlight = 1$/;"	v
g:NERDTreeExactMatchHighlightFullName	init.plug.vim	/^let g:NERDTreeExactMatchHighlightFullName = 1$/;"	v
g:NERDTreeExtensionHighlightColor	init.plug.vim	/^let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoid error$/;"	v
g:NERDTreeExtensionHighlightColor	init.plug.vim	/^let g:NERDTreeExtensionHighlightColor['css'] = s:blue " sets the color of css files to blue$/;"	v
g:NERDTreeExtensionHighlightColor	init.plug.vim	/^let g:NERDTreeExtensionHighlightColor['html'] = s:purple " sets the color of css files to blue$/;"	v
g:NERDTreeExtensionHighlightColor	init.plug.vim	/^let g:NERDTreeExtensionHighlightColor['ts'] = s:blue " sets the color of css files to blue$/;"	v
g:NERDTreeLimitedSyntax	init.plug.vim	/^let g:NERDTreeLimitedSyntax = 1$/;"	v
g:NERDTreePatternMatchHighlightFullName	init.plug.vim	/^let g:NERDTreePatternMatchHighlightFullName = 1$/;"	v
g:NERDTreeWinSize	init.plug.vim	/^let g:NERDTreeWinSize=30$/;"	v
g:WebDevIconsDefaultFileSymbolColor	init.plug.vim	/^let g:WebDevIconsDefaultFileSymbolColor = s:blue " sets the color for files that did not match any rule$/;"	v
g:WebDevIconsDefaultFolderSymbolColor	init.plug.vim	/^let g:WebDevIconsDefaultFolderSymbolColor = s:beige " sets the color for folders that did not match any rule$/;"	v
g:WebDevIconsDisableDefaultFileSymbolColorFromNERDTreeFile	init.plug.vim	/^let g:WebDevIconsDisableDefaultFileSymbolColorFromNERDTreeFile = 1$/;"	v
g:WebDevIconsDisableDefaultFolderSymbolColorFromNERDTreeDir	init.plug.vim	/^let g:WebDevIconsDisableDefaultFolderSymbolColorFromNERDTreeDir = 1$/;"	v
g:airline#extensions#branch#enabled	init.plug.vim	/^let g:airline#extensions#branch#enabled=1$/;"	v
g:airline#extensions#tabline#enabled	init.plug.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tmuxline#enabled	init.plug.vim	/^let g:airline#extensions#tmuxline#enabled = 1$/;"	v
g:airline_powerline_fonts	init.plug.vim	/^let g:airline_powerline_fonts = 0$/;"	v
g:airline_theme	init.plug.vim	/^let g:airline_theme = 'bubblegum'$/;"	v
g:highlightedyank_highlight_duration	init.plug.vim	/^let g:highlightedyank_highlight_duration = 500$/;"	v
g:hybrid_reduced_contrast	init.vim	/^        let g:hybrid_reduced_contrast = 1$/;"	v
g:lasttab	init.tab.vim	/^let g:lasttab = 1$/;"	v
g:mapleader	init.map.vim	/^let g:mapleader = ","$/;"	v
g:mapleader	init.map.vscode.vim	/^let g:mapleader = ","$/;"	v
g:term_buf	init.vim	/^    let g:term_buf = 0$/;"	v
g:term_win	init.vim	/^    let g:term_win = 0$/;"	v
gI	init.map.vim	/^nnoremap gI `.$/;"	m
mapleader	init.map.vim	/^let mapleader = ","$/;"	v
mapleader	init.map.vscode.vim	/^let mapleader = ","$/;"	v
s:activatedh	init.vim	/^    let s:activatedh = 0$/;"	v
s:activatehex	init.vim	/^    let s:activatehex = 0$/;"	v
s:activatewrap	init.vim	/^    let s:activatewrap = 0$/;"	v
s:aqua	init.plug.vim	/^let s:aqua =  "3AFFDB"$/;"	v
s:beige	init.plug.vim	/^let s:beige = "F5C06F"$/;"	v
s:blue	init.plug.vim	/^let s:blue = "689FB6"$/;"	v
s:brown	init.plug.vim	/^let s:brown = "905532"$/;"	v
s:darkBlue	init.plug.vim	/^let s:darkBlue = "44788E"$/;"	v
s:darkOrange	init.plug.vim	/^let s:darkOrange = "F16529"$/;"	v
s:git_orange	init.plug.vim	/^let s:git_orange = 'F54D27'$/;"	v
s:green	init.plug.vim	/^let s:green = "8FAA54"$/;"	v
s:lightGreen	init.plug.vim	/^let s:lightGreen = "31B53E"$/;"	v
s:lightPurple	init.plug.vim	/^let s:lightPurple = "834F79"$/;"	v
s:orange	init.plug.vim	/^let s:orange = "D4843E"$/;"	v
s:pink	init.plug.vim	/^let s:pink = "CB6F6F"$/;"	v
s:purple	init.plug.vim	/^let s:purple = "834F79"$/;"	v
s:red	init.plug.vim	/^let s:red = "AE403F"$/;"	v
s:rspec_red	init.plug.vim	/^let s:rspec_red = 'FE405F'$/;"	v
s:salmon	init.plug.vim	/^let s:salmon = "EE6E73"$/;"	v
s:white	init.plug.vim	/^let s:white = "FFFFFF"$/;"	v
s:yellow	init.plug.vim	/^let s:yellow = "F09F17"$/;"	v
